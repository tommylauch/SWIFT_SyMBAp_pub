                             SYMBA5 PARALLELIZATION
Authors : Tommy Chi Ho Lau
Date:     Aug/20
Last Revisions: Jul/22

SyMBAp (main/swift_symba5p.f) in this package is a parallelized version of SyMBA (main/swift_symba5.f) in the SWIFT subroutine package.
The original SWIFT package is retrieved from https://www.boulder.swri.edu/~hal/swift.html in Jan 2019.
Trapezium nested loops are flattened and close encounter pairs are grouped such thateach group can be handled in parallel.

In addition to the input file and parameter for SyMBA, SyMBAp also asks for two thread usage parameters: lower limit of particle-to-thread ratio (integer) and max. no. of threads to be used (integer)

Since encounter pairs are grouped in SyMBAp, errors may occur if the max no. of groups or the max group size pre-set in symba5p/symba5p.inc is too small for the simulation.
 

                             COMPILATION
                             
In addition to the default compilation flags, "-fopenmp" is needed for GCC compiler to invoke OpenMP.
GCC 13+ required for version 1.7+.

                             ENVIRONMENT VARIABLE
                             
Prior to starting new job, depending on your system, use
	export OMP_NUM_THREADS= <number of threads to use>
or
	set OMP_NUM_THREADS= <number of threads to use>
to set the desired number of threads to use.

From https://gcc.gnu.org/onlinedocs/gfortran/OpenMP.html: "-fopenmp implies -frecursive, i.e., all local arrays will be allocated on the stack." Segmentation faults occur if the stacksize is not large enough for the pre-set sizes of arrays. User may need to use
	ulimit -s unlimited
or
	ulimit -s <specified value>
to set the desired size of the main stack. And use
   export OMP_STACKSIZE=<specified value>
to set the desired size of the stack for all threads created with OpenMP.

                             CHANGELOG
Nov/20 - version 1.1: Fixed a bug in symba5_getacch.f that the array ielst is passed from integer*2 to integer
Feb/21 - version 1.4: Changed posting format to show particle number up to 6 digits.
Nov/21 - version 1.5: Added thread no. control depending on user-determined lower limit of particle-to-thread ratio
Dec/21 - Energy checking found to be incompatible with SyMBAp. Please turn off flag L4 in parameter file before the next version.
Jan/22 - version 1.6: Energy offset due to mergers will not be tracked for SyMBAp. Flag L4 can be turned on again.
Jul/22 - Added subroutine 'io_discard_cleanup' to clean up discard_mass.out upon resumption for SyMBA and SyMBAp
Jul/23 - version 1.7: Implemented automatic non-rectangular loop nests collapse, requires GCC 13+.
Dec/23 - version 1.8: x,y,z arrays in SyMBAp are merged into large arrays and the '-ftree-vectorize' flag is added to the compilation scripts.
